options {LOOKAHEAD = 2;}
PARSER_BEGIN(Parser)

package ru.vsu.cs.course3.compiler;

import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.*;

import ru.vsu.cs.course3.compiler.ast.*;

public class Parser {
        public static void main(String[] args) throws Exception {
            Reader input = args.length > 0 ? new FileReader(args[0]) : new InputStreamReader(System.in);
            Parser parser = new Parser(input);
            AstNode result = parser.start();
            result.printTree(System.out);
        }
}

PARSER_END(Parser)

SKIP:  {
    <WS: " " | "\t" | "\r" | "\n" | "\r\n">
  | <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])*>
  | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*/">
}

TOKEN: {
    <#LETTER: ["a"-"z", "A"-"Z", "_"]>
  | <#DIGIT: ["0"-"9"]>
}

TOKEN: {
    <RETURN: "return">
}

TOKEN: {
    <INT_VALUE: (<DIGIT>)+>
  | <FLOAT_VALUE: (<DIGIT>)+ "." (<DIGIT>)* | "." (<DIGIT>)+>
  | <#ESCAPE: "\\" ["n","t","b","r","f","\\","\"","\'"]>
  | <CHAR_VALUE: "\'" (~["\'","\\"]|<ESCAPE>) "\'">
  | <STRING_VALUE: "\"" (~["\"","\\"]|<ESCAPE>)* "\"">
}
TOKEN: {
    <IF: "if">
  | <ELSE: "else">
  | <TRUE: "true">
  | <FALSE: "false">
}

TOKEN : {
  <FOR: "for">
  | <WHILE: "while">
}

TOKEN: {
    <INT: "int">
  | <BOOL: "bool">
  | <CHAR: "char">
  | <FLOAT: "float">
  | <VOID: "void">
}

TOKEN: {
    <IDENT: <LETTER>(<LETTER>|<DIGIT>)*>
}


ValueNode value(): { Token val; } {
    (
         val=<INT_VALUE>
       | val=<FLOAT_VALUE>
       | val=<STRING_VALUE>
       | val=<TRUE> | val=<FALSE>
    )
    { return new ValueNode(val.image); }
}

IdentNode ident(): { Token ident; } { ident=<IDENT> { return new IdentNode(ident.image); } }

TypeNode type(): { Token type; } {
    (type=<INT>
     |type=<CHAR>
     |type=<BOOL>
     |type=<FLOAT>
     |type=<VOID>)
    { return new TypeNode(type.image); }
}

List<ExprNode> params(): { List<ExprNode> params = new ArrayList<>(); ExprNode e; } {
    (e=expr() { params.add(e); } ("," e=expr() { params.add(e); })*)?
    { return params; }
}

FuncCallNode funcCall(): { IdentNode ident; List<ExprNode> params; } {
    ident=ident() "(" params=params() ")"
    { return new FuncCallNode(ident, params); }
}

ExprNode group(): { ExprNode e; } {
    (
        e=value()
      | e=funcCall()
      | e=ident()
      | "(" e=expr() ")"
    )
    { return e; }
}
//pre ibncrement and decrement here


ExprNode preIncrementOrDecrement(): {  ExprNode arg = null;  Token op = null; } {
   [ op = "++" | op = "--" ]
   arg = group()
       {
              if (op != null) {
                  return new UnaryOperationNode(op.toString(), arg, true);
              } else {
                  return arg;
              }
       }
}

ExprNode mult(): { ExprNode arg1; ExprNode arg2; Token op; } {
    arg1=preIncrementOrDecrement() ( ( op="*" | op="/" ) arg2=postIncrementOrDecrement() { arg1 = new BinaryOpNode(op.toString(), arg1, arg2); } )* { return arg1; }
}

ExprNode add(): { ExprNode arg1; ExprNode arg2; Token op; } {
    arg1=mult() ( ( op="+" | op="-" ) arg2=mult() { arg1 = new BinaryOpNode(op.toString(), arg1, arg2); } )* { return arg1; }
}

ExprNode compare(): { ExprNode arg1; ExprNode arg2; Token op; } {
    arg1=add() ( ( op=">"  | op=">=" | op="<" | op="<=" ) arg2=add() { arg1 = new BinaryOpNode(op.toString(), arg1, arg2); } )* { return arg1; }
}

ExprNode equality(): { ExprNode arg1; ExprNode arg2; Token op; } {
    arg1=compare() ( ( op="=="  | op="!=" ) arg2=compare() { arg1 = new BinaryOpNode(op.toString(), arg1, arg2); } )* { return arg1; }
}

ExprNode and(): { ExprNode arg1; ExprNode arg2; Token op; } {
    arg1=equality() ( ( op="&&" ) arg2=equality() { arg1 = new BinaryOpNode(op.toString(), arg1, arg2); } )* { return arg1; }
}

ExprNode or(): { ExprNode arg1; ExprNode arg2; Token op; } {
    arg1=and() ( ( op="||" ) arg2=and() { arg1 = new BinaryOpNode(op.toString(), arg1, arg2); } )* { return arg1; }
}

ExprNode postIncrementOrDecrement(): {  ExprNode arg = null;  Token op = null; } {
   arg = or()
   [ op = "++" | op = "--" ]

       {
              if (op != null) {
                  return new UnaryOperationNode(op.toString(), arg, false);
              } else {
                  return arg;
              }
       }
}


ExprNode expr(): { ExprNode r; } { r=postIncrementOrDecrement() { return r; } }

// findo out if c allows *= and sucj operations
AssignNode assignWithType(): {
    TypeNode type = null;
    IdentNode ident = null;
    ExprNode expr = null;
    AssignNode stmt = null;
}
{
  type = type() ident = ident() "=" expr = expr()
  {
      return new AssignNode(type, ident, expr);
  }

}

AssignNode assignWithOperation(): { IdentNode ident = null; Token op = null; ExprNode expr = null; }
{
        ident = ident() ( op="*=" | op="/=" | op="-=" | op="+=" ) expr = expr()
        { expr = new BinaryOpNode("" + op.toString().charAt(0), ident, expr); return new AssignNode(ident, expr); }
}

AssignNode assignNoType(): {IdentNode ident; ExprNode exprRightSide, exprAssignee; AssignNode stmt;} {
    ident=ident()  "=" exprRightSide=expr()
   { stmt = new AssignNode(ident, exprRightSide);  return stmt; }
}

VariableDeclarationNode variableDeclaration(): {TypeNode type = null; IdentNode ident = null;}
{
    type = type() ident=ident()
    { return new VariableDeclarationNode(type, ident); }
}

StmtNode assign(): { StmtNode stmt; } {
    (

        stmt = assignWithType()
        | stmt = assignNoType()
        | stmt = assignWithOperation()

    )
    { return stmt; }
}

WhileNode whileStmt() : { ExprNode cond = null; StmtNode body = null; } {
        <WHILE> "(" cond=expr() ")" (body=blockAndOneLineStmt())?
        { return new WhileNode(cond, body); }
}

ForNode forStmt() : {
                         StmtNode init = null;
                         ExprNode cond = new LiteralNode("true");
                         ExprNode step = null;
                         StmtNode body;
                     }
 {
     <FOR> "(" (init=assign())? ";" (cond=expr())? ";" (step=expr())? ")" body=blockAndOneLineStmt()
     { return new ForNode(init, cond, step, body); }
 }

 IfNode ifStmt() : { ExprNode cond; StmtNode thenStmt; StmtNode elseStmt = null; } {
        <IF> "(" cond=expr() ")" thenStmt=blockAndOneLineStmt() (<ELSE> elseStmt=blockAndOneLineStmt())?
         { return new IfNode(cond, thenStmt, elseStmt); }
 }

StmtNode listStmt(): { List<StmtNode> list = new ArrayList<>(); } {
    ( { StmtNode stmt; } stmt=blockAndOneLineStmt() { list.add(stmt); } )*
    { return new StmtListNode(list); }
}

StmtNode blockStmt(): { StmtNode stmt; } {
    (
        "{" stmt=listStmt() "}"
      | stmt = ifStmt()
      | stmt = whileStmt()
      | stmt = forStmt()
    )
    { return stmt; }
}

StmtNode blockAndOneLineStmt(): { StmtNode stmt; } {
    (
            LOOKAHEAD(5) stmt = variableDeclaration() ";"
                    | LOOKAHEAD(5) stmt = assign() ";"
                    | LOOKAHEAD(5) stmt = funcCall() ";"
                    | stmt = blockStmt()
    )
    { return stmt; }
}

FunctionParamDeclarationNode functionDeclarationParam(): { TypeNode type; IdentNode name; }
{
    type = type() name = ident()
    { return new FunctionParamDeclarationNode(type, name); }
}

List<FunctionParamDeclarationNode> functionDeclarationParams(): { List<FunctionParamDeclarationNode> params = new ArrayList<>(); FunctionParamDeclarationNode e; } {
    (e=functionDeclarationParam() { params.add(e); } ("," e=functionDeclarationParam() { params.add(e); })*)?
    { return params; }
}

ReturnNode returnStmt():
{ ExprNode expression = null; }
{
  expression = expr()

  { return new ReturnNode(expression); }
}
FunctionDeclarationNode funcDeclaration():
    { TypeNode type; IdentNode name; List<FunctionParamDeclarationNode> params = null; StmtNode body; ReturnNode returnNode = null; }
{
    type = type() name = ident() "(" params = functionDeclarationParams() ")" body = blockStmt() (returnNode = returnStmt())?

    { return new FunctionDeclarationNode(type, name, params, body); }
}

StmtListNode program(): { StmtNode e; StmtListNode program = new StmtListNode(); } {
    (LOOKAHEAD(3) ( e=funcDeclaration()  { program.stmts.add(e); })
                  |(e=assignWithType() ";" { program.stmts.add(e); }))+
                  { return program; }
}

AstNode start(): { StmtListNode program; } {
    program=program() { return program; }
}